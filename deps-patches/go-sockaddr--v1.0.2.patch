From b6db4692944a17d834b999caf572667d1be3b252 Mon Sep 17 00:00:00 2001
From: v1gnesh <v1gnesh@users.noreply.github.com>
Date: Fri, 15 Dec 2023 03:02:29 -0500
Subject: [PATCH] Add zOS support

---
 route_info_zos.go | 40 ++++++++++++++++++++++++++++++++++++++++
 1 file changed, 40 insertions(+)
 create mode 100644 route_info_zos.go

diff --git a/route_info_zos.go b/route_info_zos.go
new file mode 100644
index 0000000..d544b7c
--- /dev/null
+++ b/route_info_zos.go
@@ -0,0 +1,40 @@
+// +build zos
+package sockaddr
+
+import (
+   "errors"
+   "os/exec"
+   "regexp"
+   "strings"
+)
+
+type routeInfo struct {
+   cmds map[string][]string
+}
+
+var defaultRouteRE *regexp.Regexp = regexp.MustCompile(`^Default +([0-9\.\:]+) +([^ ]+) +([0-9]+) +([^ ]+)`)
+
+// NewRouteInfo returns a ZOS-specific implementation of the RouteInfo
+// interface.
+func NewRouteInfo() (routeInfo, error) {
+   return routeInfo{
+       cmds: map[string][]string{"ip": {"/bin/onetstat", "-r"}},
+   }, nil
+}
+
+// GetDefaultInterfaceName returns the interface name attached to the default
+// route on the default interface.
+func (ri routeInfo) GetDefaultInterfaceName() (string, error) {
+   out, err := exec.Command(ri.cmds["ip"][0], ri.cmds["ip"][1:]...).Output()
+   if err != nil {
+       return "", err
+   }
+   linesout := strings.Split(string(out), "\n")
+   for _, line := range linesout {
+       result := defaultRouteRE.FindStringSubmatch(line)
+       if result != nil {
+           return result[4], nil
+       }
+   }
+   return "", errors.New("No default interface found")
+}
-- 
2.42.1

